# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: deploy
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  build:
    strategy:
      matrix:
        # Use these Java versions
        java: [
          17,    # Current Java LTS & minimum supported by Minecraft
        ]
        # and run on both Linux and Windows
        os: [ubuntu-22.04, windows-2022]
    runs-on: ${{ matrix.os }}
    outputs:
      build_version: ${{ env.VERSION_NAME }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'microsoft'

      - name: Make Gradle Wrapper Executable
        if: ${{ runner.os != 'Windows' }}
        run: chmod +x ./gradlew

      - name: Retrieve Version
        id: build-version
        run: |
          echo "VERSION_NAME=$(./gradlew -q printVersionName)" >> $GITHUB_ENV

      - name: Build
        run: ./gradlew build

      - name: Capture Build Artifacts
        if: ${{ runner.os == 'Linux' && matrix.java == '17' }} # Only upload artifacts built from latest java on one OS
        uses: actions/upload-artifact@v3
        with:
          name: Artifacts
          path: build/libs/

  publish:
    name: "Draft Release"
    needs: build
    runs-on: ubuntu-latest
    outputs:
      filenames: ${{ steps.get-filenames.outputs.filenames }}
    steps:
      - name: Download
        uses: actions/download-artifact@v3
        with:
          name: Artifacts

      - name: "Get File Names"
        id: get-filenames
        run: echo filenames=$(ls -1 *.jar) >> $GITHUB_OUTPUT

      - name: "Create Tag"
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{needs.build.outputs.build_version}}',
              sha: context.sha
            })

      - name: Create Release
        uses: softprops/action-gh-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        with:
          tag_name: ${{ needs.build.outputs.build_version }}
          name: Epitome-${{ needs.build.outputs.build_version }}
          draft: true
          prerelease: true
          generate_release_notes: true
          files: |
            epitome-${{needs.build.outputs.build_version}}.jar
            epitome-${{needs.build.outputs.build_version}}-sources.jar